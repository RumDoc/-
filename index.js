require('dotenv').config();
const {
    Client,
    GatewayIntentBits,
    REST,
    Routes,
    SlashCommandBuilder,
    ButtonBuilder,
    ButtonStyle,
    ActionRowBuilder,
    Events
} = require('discord.js');
const fs = require('fs');
const http = require('http');

const token = process.env.TOKEN;
const clientId = process.env.CLIENT_ID;
const guildId = process.env.GUILD_ID;

if (!token || !clientId || !guildId) {
    console.error('‚ùå Missing environment variables: TOKEN, CLIENT_ID, or GUILD_ID');
    process.exit(1);
}

const client = new Client({
    intents: [GatewayIntentBits.Guilds]
});

let stats = {};
const statsFile = './stats.json';

if (fs.existsSync(statsFile)) {
    try {
        stats = JSON.parse(fs.readFileSync(statsFile));
    } catch (err) {
        console.error('‚ùå Failed to read stats file:', err);
    }
}

function saveStats() {
    try {
        fs.writeFileSync(statsFile, JSON.stringify(stats, null, 2));
        console.log('‚úÖ Stats saved.');
    } catch (err) {
        console.error('‚ùå Failed to save stats:', err);
    }
}

// ----------------------------
// Slash-–∫–æ–º–∞–Ω–¥–∏
// ----------------------------
const commands = [
    new SlashCommandBuilder()
        .setName('–¥—É–µ–ª—å')
        .setDescription('–ö–∏–Ω—É—Ç–∏ –≤–∏–∫–ª–∏–∫ –≥—Ä–∞–≤—Ü—é –∞–±–æ –±—É–¥—å-–∫–æ–º—É')
        .addUserOption(option =>
            option.setName('–≥—Ä–∞–≤–µ—Ü—å').setDescription('–ö–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞—î—à').setRequired(false)
        ),
    new SlashCommandBuilder()
        .setName('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        .setDescription('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
].map(cmd => cmd.toJSON());

const rest = new REST({ version: '10' }).setToken(token);

(async () => {
    try {
        console.log('üì° Registering slash commands...');
        await rest.put(Routes.applicationGuildCommands(clientId, guildId), {
            body: commands
        });
        console.log('‚úÖ Slash commands registered.');
    } catch (error) {
        console.error('‚ùå Error registering slash commands:', error);
    }
})();

client.once('ready', () => {
    console.log(`‚úÖ –ë–æ—Ç —É–≤—ñ–º–∫–Ω–µ–Ω–æ —è–∫ ${client.user.tag}`);
});

client.on(Events.InteractionCreate, async interaction => {
    try {
        if (interaction.isChatInputCommand()) {
            console.log(`üì• Slash command received: ${interaction.commandName}`);
            if (interaction.commandName === '–¥—É–µ–ª—å') {
                const challenger = interaction.user;
                const opponent = interaction.options.getUser('–≥—Ä–∞–≤–µ—Ü—å');

                const acceptRow = new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('accept').setLabel('‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏').setStyle(ButtonStyle.Success),
                    new ButtonBuilder().setCustomId('decline').setLabel('‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏').setStyle(ButtonStyle.Danger)
                );

                if (opponent) {
                    await interaction.reply({
                        content: `üõ°Ô∏è ${opponent}, —Ç–µ–±–µ –≤–∏–∫–ª–∏–∫–∞—î –Ω–∞ –¥—É–µ–ª—å ${challenger}!`,
                        components: [acceptRow]
                    });

                    const filter = i => ['accept', 'decline'].includes(i.customId) && i.user.id === opponent.id;
                    const collector = interaction.channel.createMessageComponentCollector({
                        filter,
                        time: 15000
                    });

                    collector.on('collect', async i => {
                        await handleDuelResponse(i, challenger, opponent);
                    });

                } else {
                    await interaction.reply({
                        content: `‚öîÔ∏è ${challenger} –≤–∏–∫–ª–∏–∫–∞—î –Ω–∞ –¥—É–µ–ª—å –±—É–¥—å-–∫–æ–≥–æ! –•—Ç–æ –ø—Ä–∏–π–º–∞—î –≤–∏–∫–ª–∏–∫?`,
                        components: [acceptRow]
                    });

                    const filter = i => ['accept', 'decline'].includes(i.customId) && i.user.id !== challenger.id;
                    const collector = interaction.channel.createMessageComponentCollector({
                        filter,
                        max: 1,
                        time: 15000
                    });

                    collector.on('collect', async i => {
                        if (i.customId === 'accept') {
                            await handleDuelResponse(i, challenger, i.user);
                        } else {
                            await i.update({
                                content: `‚ùå –í—ñ–¥–∫—Ä–∏—Ç–∏–π –≤–∏–∫–ª–∏–∫ –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.`,
                                components: []
                            });
                        }
                    });
                }
            }

            if (interaction.commandName === '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
                const user = interaction.user;
                const userStats = stats[user.id];

                if (!userStats) {
                    await interaction.reply({
                        content: '–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –¥—É–µ–ª–µ–π.',
                        ephemeral: true
                    });
                } else {
                    const victories = Object.entries(userStats.victoriesOver || {})
                        .map(([id, count]) => `<@${id}> ‚Äî ${count} —Ä–∞–∑(–∏)`)
                        .join('\n') || '–ù—ñ–∫–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–º—ñ–≥';

                    await interaction.reply({
                        content: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${user.username}:\n‚úÖ –ü–µ—Ä–µ–º–æ–≥: ${userStats.wins}\n‚ùå –ü–æ—Ä–∞–∑–æ–∫: ${userStats.losses}\n\nüëë –ü–µ—Ä–µ–º–æ–≥–∏ –Ω–∞–¥:\n${victories}`,
                        ephemeral: true
                    });
                }
            }
        }

        if (interaction.isButton()) {
            console.log(`üîò Button clicked: ${interaction.customId}`);
            const [result, challengerId, opponentId] = interaction.customId.split('_');

            if (!['win', 'lose'].includes(result)) return;

            if (![challengerId, opponentId].includes(interaction.user.id)) {
                return interaction.reply({
                    content: '–¢–∏ –Ω–µ —É—á–∞—Å–Ω–∏–∫ —Ü—ñ—î—ó –¥—É–µ–ª—ñ!',
                    ephemeral: true
                });
            }

            let winner, loser;

            if (result === 'win') {
                winner = interaction.user.id;
                loser = winner === challengerId ? opponentId : challengerId;
            } else {
                loser = interaction.user.id;
                winner = loser === challengerId ? opponentId : challengerId;
            }

            if (!stats[winner]) stats[winner] = { wins: 0, losses: 0, victoriesOver: {} };
            if (!stats[loser]) stats[loser] = { wins: 0, losses: 0, victoriesOver: {} };

            stats[winner].wins++;
            stats[winner].victoriesOver[loser] = (stats[winner].victoriesOver[loser] || 0) + 1;
            stats[loser].losses++;

            saveStats();

            await interaction.update({
                content: `üèÅ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: <@${winner}>! –ü–æ—Ä–∞–∑–∫–∞: <@${loser}>.`,
                components: []
            });
        }
    } catch (err) {
        console.error('‚ùå Interaction error:', err);
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({
                content: 'üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.',
                ephemeral: true
            });
        } else {
            await interaction.reply({
                content: 'üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.',
                ephemeral: true
            });
        }
    }
});

async function handleDuelResponse(interaction, challenger, opponent) {
    console.log(`‚öîÔ∏è –î—É–µ–ª—å –º—ñ–∂ ${challenger.username} —ñ ${opponent.username}`);
    const resultRow = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId(`win_${challenger.id}_${opponent.id}`).setLabel(`ü•á –Ø –ø–µ—Ä–µ–º—ñ–≥`).setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId(`lose_${challenger.id}_${opponent.id}`).setLabel(`ü•à –Ø –ø—Ä–æ–≥—Ä–∞–≤`).setStyle(ButtonStyle.Secondary)
    );

    try {
        await interaction.update({
            content: `‚öîÔ∏è –î—É–µ–ª—å –º—ñ–∂ ${challenger} —ñ ${opponent} –ø–æ—á–∞–ª–∞—Å—å! –•—Ç–æ –ø–µ—Ä–µ–º—ñ–≥?`,
            components: [resultRow]
        });
    } catch (error) {
        console.error('‚ùå Failed to update duel interaction:', error);
    }
}

client.login(token).catch(err => {
    console.error('‚ùå Failed to login to Discord:', err);
});

// Simple HTTP server for Render.com compatibility
const port = process.env.PORT || 3000;
const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Discord Bot is running!');
});

server.listen(port, () => {
    console.log(`üåê HTTP server listening on port ${port}`);
});
